[{"/home/tinkal/Desktop/Altcampus/reactJS/conduit-app/src/index.js":"1","/home/tinkal/Desktop/Altcampus/reactJS/conduit-app/src/components/App.js":"2","/home/tinkal/Desktop/Altcampus/reactJS/conduit-app/src/components/Home.js":"3","/home/tinkal/Desktop/Altcampus/reactJS/conduit-app/src/components/Login.js":"4","/home/tinkal/Desktop/Altcampus/reactJS/conduit-app/src/components/Register.js":"5","/home/tinkal/Desktop/Altcampus/reactJS/conduit-app/src/components/SingleArticle.js":"6","/home/tinkal/Desktop/Altcampus/reactJS/conduit-app/src/components/partials/Footer.js":"7","/home/tinkal/Desktop/Altcampus/reactJS/conduit-app/src/components/partials/Header.js":"8","/home/tinkal/Desktop/Altcampus/reactJS/conduit-app/src/components/partials/TagList.js":"9","/home/tinkal/Desktop/Altcampus/reactJS/conduit-app/src/components/partials/ArticleList.js":"10","/home/tinkal/Desktop/Altcampus/reactJS/conduit-app/src/components/partials/TagPills.js":"11","/home/tinkal/Desktop/Altcampus/reactJS/conduit-app/src/components/partials/Comment.js":"12","/home/tinkal/Desktop/Altcampus/reactJS/conduit-app/src/components/partials/loader/Loader.js":"13","/home/tinkal/Desktop/Altcampus/reactJS/conduit-app/src/components/NewArticle.js":"14","/home/tinkal/Desktop/Altcampus/reactJS/conduit-app/src/components/Settings.js":"15","/home/tinkal/Desktop/Altcampus/reactJS/conduit-app/src/components/utility/utility.js":"16","/home/tinkal/Desktop/Altcampus/reactJS/conduit-app/src/components/partials/Pagination.js":"17"},{"size":290,"mtime":1613062720933,"results":"18","hashOfConfig":"19"},{"size":800,"mtime":1613314103024,"results":"20","hashOfConfig":"19"},{"size":2657,"mtime":1613244797015,"results":"21","hashOfConfig":"19"},{"size":5052,"mtime":1613497977693,"results":"22","hashOfConfig":"19"},{"size":6724,"mtime":1613550594824,"results":"23","hashOfConfig":"19"},{"size":4143,"mtime":1613491705411,"results":"24","hashOfConfig":"19"},{"size":421,"mtime":1613065293116,"results":"25","hashOfConfig":"19"},{"size":1809,"mtime":1613314028979,"results":"26","hashOfConfig":"19"},{"size":1337,"mtime":1613492015355,"results":"27","hashOfConfig":"19"},{"size":3752,"mtime":1613490429357,"results":"28","hashOfConfig":"19"},{"size":245,"mtime":1613150086148,"results":"29","hashOfConfig":"19"},{"size":2974,"mtime":1613543435103,"results":"30","hashOfConfig":"19"},{"size":181,"mtime":1613078703780,"results":"31","hashOfConfig":"19"},{"size":6536,"mtime":1613493881325,"results":"32","hashOfConfig":"19"},{"size":7016,"mtime":1613552851542,"results":"33","hashOfConfig":"19"},{"size":282,"mtime":1613543573482,"results":"34","hashOfConfig":"19"},{"size":598,"mtime":1613476620718,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"zysp8q",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/home/tinkal/Desktop/Altcampus/reactJS/conduit-app/src/index.js",[],["72","73"],"/home/tinkal/Desktop/Altcampus/reactJS/conduit-app/src/components/App.js",[],"/home/tinkal/Desktop/Altcampus/reactJS/conduit-app/src/components/Home.js",[],"/home/tinkal/Desktop/Altcampus/reactJS/conduit-app/src/components/Login.js",[],"/home/tinkal/Desktop/Altcampus/reactJS/conduit-app/src/components/Register.js",[],"/home/tinkal/Desktop/Altcampus/reactJS/conduit-app/src/components/SingleArticle.js",[],"/home/tinkal/Desktop/Altcampus/reactJS/conduit-app/src/components/partials/Footer.js",[],"/home/tinkal/Desktop/Altcampus/reactJS/conduit-app/src/components/partials/Header.js",[],"/home/tinkal/Desktop/Altcampus/reactJS/conduit-app/src/components/partials/TagList.js",[],"/home/tinkal/Desktop/Altcampus/reactJS/conduit-app/src/components/partials/ArticleList.js",[],"/home/tinkal/Desktop/Altcampus/reactJS/conduit-app/src/components/partials/TagPills.js",[],"/home/tinkal/Desktop/Altcampus/reactJS/conduit-app/src/components/partials/Comment.js",["74"],"/home/tinkal/Desktop/Altcampus/reactJS/conduit-app/src/components/partials/loader/Loader.js",[],"/home/tinkal/Desktop/Altcampus/reactJS/conduit-app/src/components/NewArticle.js",[],"/home/tinkal/Desktop/Altcampus/reactJS/conduit-app/src/components/Settings.js",["75","76"],"import { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { currentUserURL } from \"./utility/utility\";\nimport {\n  validateUsername,\n  validateEmail,\n  validatePassword,\n} from \"./Register\";\n\nclass Settings extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: null,\n      fetchRequestError: \"\",\n      updatedUser: null,\n      updateRequestError: \"\",\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      bio: \"\",\n      image: \"\",\n      errors: {\n        username: \"\",\n        email: \"\",\n        password: \"\",\n      },\n    };\n  }\n  componentDidMount() {\n    const requestOptions = {\n      method: \"GET\",\n      headers: {\n        authorization: localStorage.getItem(\"token\"),\n      },\n    };\n    fetch(currentUserURL, requestOptions)\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(res.statusText);\n        }\n        return res.json();\n      })\n      .then((data) => {\n        const currentUser = data.user;\n        this.setState({\n          username: currentUser?.username,\n          email: currentUser?.email,\n          bio: currentUser?.bio,\n          image: currentUser?.image,\n        });\n      })\n      .catch((error) => {\n        this.setState({\n          fetchRequestError: \"Not able to fetch current user data\",\n        });\n      });\n  }\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { username, email, bio, image, password } = this.state;\n    let user = { username, email, bio, image };\n    if (password) {\n      user.password = password;\n    }\n    const errors = this.state.errors;\n\n    if (!errors.username && !errors.email && !errors.password) {\n      const requestOptions = {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          authorization: localStorage.getItem(\"token\"),\n        },\n        body: JSON.stringify({ user }),\n      };\n\n      fetch(currentUserURL, requestOptions)\n        .then((res) => {\n          if (!res.ok) {\n            throw new Error(res.statusText);\n          }\n          return res.json();\n        })\n        .then((data) => this.setState({ updatedUser: data.user }))\n        .catch((error) => {\n          this.setState({\n            updateRequestError: \"Not able to update current user\",\n          });\n        });\n    }\n  };\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    let errors = this.state.errors;\n\n    switch (name) {\n      case \"username\":\n        errors.username = !value.length\n          ? \"Username is required\"\n          : !validateUsername(value)\n          ? \"Username must be atleast 6 characters\"\n          : \"\";\n        break;\n      case \"email\":\n        errors.email = !value.length\n          ? \"Email is required\"\n          : !validateEmail(value)\n          ? \"Email is invalid\"\n          : \"\";\n        break;\n      case \"password\":\n        errors.password = !value\n          ? \"\"\n          : !validatePassword(value)\n          ? \"Password must contain a letter, a number and atleast 6 characters\"\n          : \"\";\n        break;\n      default:\n        break;\n    }\n\n    this.setState({\n      [name]: value,\n      errors: errors,\n    });\n  };\n  render() {\n    const {\n      username,\n      email,\n      password,\n      bio,\n      image,\n      errors,\n      updatedUser,\n      fetchRequestError,\n      updateRequestError,\n    } = this.state;\n\n    // if (updatedUser) {\n    //   return <Redirect to=\"/profie\" />;\n    // }\n\n    return (\n      <div className=\"settings-page\">\n        <div className=\"container page\">\n          <div className=\"row\">\n            <div className=\"col-md-6 offset-md-3 col-xs-12\">\n              <h1 className=\"text-xs-center\">Your Settings</h1>\n              <p className=\"server-error\">{fetchRequestError}</p>\n              <p className=\"server-error\">{updateRequestError}</p>\n              <form onSubmit={this.handleSubmit}>\n                <fieldset>\n                  <fieldset className=\"form-group\">\n                    <input\n                      value={image}\n                      name=\"image\"\n                      onChange={this.handleChange}\n                      className=\"form-control\"\n                      type=\"text\"\n                      placeholder=\"URL of profile picture\"\n                    />\n                  </fieldset>\n                  <fieldset className=\"form-group\">\n                    <input\n                      value={username}\n                      name=\"username\"\n                      onChange={this.handleChange}\n                      className=\"form-control form-control-lg\"\n                      type=\"text\"\n                      placeholder=\"Username\"\n                      required\n                    />\n                    {errors.username ? (\n                      <span className=\"error-msg\">{errors.username}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </fieldset>\n                  <fieldset className=\"form-group\">\n                    <textarea\n                      value={bio}\n                      name=\"bio\"\n                      onChange={this.handleChange}\n                      className=\"form-control form-control-lg\"\n                      rows=\"8\"\n                      placeholder=\"Short bio about you\"\n                    ></textarea>\n                  </fieldset>\n                  <fieldset className=\"form-group\">\n                    <input\n                      value={email}\n                      name=\"email\"\n                      onChange={this.handleChange}\n                      className=\"form-control form-control-lg\"\n                      type=\"email\"\n                      placeholder=\"Email\"\n                      required\n                    />\n                    {errors.email ? (\n                      <span className=\"error-msg\">{errors.email}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </fieldset>\n                  <fieldset className=\"form-group\">\n                    <input\n                      value={password}\n                      name=\"password\"\n                      onChange={this.handleChange}\n                      className=\"form-control form-control-lg\"\n                      type=\"password\"\n                      placeholder=\"New Password\"\n                    />\n                    {errors.password ? (\n                      <span className=\"error-msg\">{errors.password}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </fieldset>\n                  <button className=\"btn btn-lg btn-primary pull-xs-right\">\n                    Update Settings\n                  </button>\n                </fieldset>\n              </form>\n\n              <hr />\n\n              <button className=\"btn btn-outline-danger\">\n                Or click here to logout.\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Settings;\n","/home/tinkal/Desktop/Altcampus/reactJS/conduit-app/src/components/utility/utility.js",[],"/home/tinkal/Desktop/Altcampus/reactJS/conduit-app/src/components/partials/Pagination.js",[],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":54,"column":15,"nodeType":"83","endLine":57,"endColumn":17},{"ruleId":"84","severity":1,"message":"85","line":2,"column":10,"nodeType":"86","messageId":"87","endLine":2,"endColumn":18},{"ruleId":"84","severity":1,"message":"88","line":136,"column":7,"nodeType":"86","messageId":"87","endLine":136,"endColumn":18},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'updatedUser' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]